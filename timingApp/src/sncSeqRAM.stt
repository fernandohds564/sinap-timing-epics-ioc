program sncSeqRAM

%%// needed for calling seq_pvPut from embedded C code 
foreign ssId;

%%//----------------------------------------
%%// 	        Variables
%%//----------------------------------------

int eventNum;
char device[40];
char * evCodeName = "EVCODE";
char * evTimeName = "EVTIME";
char * evModeName = "EVDLYMODE";
char * evCtrlName = "EVTRANSM";
char str[40];
int i;
int numberOfWrites;

%%//----------------------------------------
%%//	    State Machine Status PVs
%%//----------------------------------------

int StateMachineStatus;
assign StateMachineStatus to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:STATEMACHINE";

%%//----------------------------------------
%%// 	      Monitored PVs
%%//----------------------------------------

int network;
assign network to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:network";
monitor network;

int tbl[2000];
assign tbl to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:ITBL";

int tbl_length;
assign tbl_length to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:ITBL.NORD";

int seqs;
assign seqs to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqstat";
monitor seqs;

int seqen_rbv;
assign seqen_rbv to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqenRBV";
monitor seqen_rbv;

int seqen;
assign seqen to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqen";
int seqsw;
assign seqsw to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqram_switch.PROC";
int seqaddr;
assign seqaddr to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqaddr";
int seqcode;
assign seqcode to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqcode";
int seqtime;
assign seqtime to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqtime";

int seqcount;
assign seqcount to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqcountRBV";
monitor seqcount;

int seqcount_proc;
assign seqcount_proc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:seqcountRBV.PROC";

int event_codes[20];
assign event_codes to {};

int event_timestamps[20];
assign event_timestamps to {};

int event_modes[20];
assign event_modes to {};

int event_ctrl[20];
assign event_ctrl to {};

%%//----------------------------------------
%%// 	      Monitored Trigger PVs
%%//----------------------------------------

int stop_tg;
assign stop_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:STOPSEQ";
monitor stop_tg;

int stopinj_tg;
assign stopinj_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:STOPINJSEQ";
monitor stopinj_tg;

int run_tg;
assign run_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:RUNSEQ";
monitor run_tg;

int inj_tg;
assign inj_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:INJSEQ";
monitor inj_tg;

int restart_tg;
assign restart_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:RESTSEQ";
monitor restart_tg;

int repeatinj_tg;
assign repeatinj_tg to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:REPINJSEQ";
monitor repeatinj_tg;

%%//----------------------------------------
%%// 	  Escaped C Code Declaration
%%//----------------------------------------

%%#include <stdlib.h>

%{
    /* Type definitions */

    // Event Mode ENUM
    typedef enum{
	FIX = 0,
	INCR = 1
    } evmode;

    // Event Ctrl ENUM
    typedef enum{
	ALWAYS = 0,
	INJECTION = 1
    } evctrl;

    // Event Struct
    typedef struct Event{
	int code;
	int timestamp;
	evmode mode;
	evctrl ctrl;
    } Event;

    /* Variables */

    // Array of pointers to Events
    Event * EventPointerArray[20];
    // Array of Events
    Event EventArray[20];
    // size of both event related arrays
    const int sizeOfArrays = 20;

    /* Functions */
    int str2int(char * str);
    int ch2int(char ch);
    void init_EventPointerArray(int size);
    int bubbleSort(Event * * evArray, int arraySize);
    void swap(Event* *a, Event* *b);
    void updateEventPointerArray(int evNumber, int * code_arr,
				 int * time_arr, int * mode_arr, int * control_arr);
    int seqOneWrite(int evnum, SS_ID ssId, int *pseqaddr, int *pseqcode, int *pseqtime,
							VAR_ID seqaddr_id, VAR_ID seqcode_id, VAR_ID seqtime_id);
											
    int seqTwoWrite(int evnum, int TBL[], int length, SS_ID ssId, int *pseqaddr, int *pseqcode, int *pseqtime,
								VAR_ID seqaddr_id, VAR_ID seqcode_id, VAR_ID seqtime_id);
}%

%%//----------------------------------------
%%// 	    State Notation Language
%%//----------------------------------------

ss seq {

    state init{ 
	entry
	{
	
	   %{/* INITIALIZATION ENTRY	

	     -Variable initialization

	   */}%
	   
	  %%/* Variable Initialization */
	   StateMachineStatus = 0;
	   numberOfWrites = 0;

	  %%// Get macros
	   eventNum = str2int(macValueGet("ev_num"));
	   sprintf(device, "%s-%s:%s-%s%s", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));
	
	  %%// Assign events
	   for (i = 0; i < eventNum; i++) {
	     sprintf (str, "%s:%s%d", device, evCodeName, i);
	     pvAssign (event_codes[i], str);
	     %%//printf("%s\n", str);
	   }
	   for (i = 0; i < eventNum; i++) {
	     sprintf (str, "%s:%s%d", device, evTimeName, i);
	     pvAssign (event_timestamps[i], str);
	   }
	   for (i = 0; i < eventNum; i++) {
	     sprintf (str, "%s:%s%d", device, evModeName, i);
	     pvAssign (event_modes[i], str);
	   }
	   for (i = 0; i < eventNum; i++) {
	     sprintf (str, "%s:%s%d", device, evCtrlName, i);
	     pvAssign (event_ctrl[i], str);
	   }

	  %%// Initialize Event Pointer Array
	   init_EventPointerArray(eventNum);

	   %%//printf("Initialization Entry\n");
	}

	when(seqs == 0 && network == 1 && (pvConnectCount() == pvAssignCount()))
	{
		%{/* SeqRAM Stopped */}%

		printf("Moving to Stopped State\n");
	} state Stopped

	when(seqs == 1 && network == 1 && (pvConnectCount() == pvAssignCount()))
	{
		%{/* SeqRAM Running (SeqRAM 1)*/}%

		printf("Moving to Running State\n");
	} state Running

	when(seqs == 2 && network == 1 && (pvConnectCount() == pvAssignCount()))
	{
		%{/* SeqRAM Injecting (SeqRAM 2)*/}%

		printf("Moving to Injecting State\n");
	} state Injecting

	when (delay(10) && (pvConnectCount() != pvAssignCount())) {

		%{/* Unable to connect to some PV */}%

		printf("Error: Some PVs are still disconnected after 10s\n");
	} state init
    }

    state Stopped {
	entry{

	   %{/* STOPPED ENTRY	

		-Status update
	   */}%

	   %%// Status update (stopped)
	   StateMachineStatus = 1;
	   pvPut(StateMachineStatus, SYNC);

	   %%//printf("Stopped Entry\n");
	}

	when(seqen_rbv != 0){

		%{/* Make sure SeqRAM is disabled */}%
		
		seqen = 0;
	   	pvPut(seqen, SYNC);

	} state Stopped

	when(seqen_rbv == 0 && seqcount != 0){

		%{/* Reset seqcount and clear number of writes */}%

		seqsw = 1;
		pvPut(seqsw, SYNC);

	        numberOfWrites = 0;

		%%// Force seqcountRBV to update
		seqcount_proc = 1;
		pvPut(seqcount_proc, SYNC);

	}state Stopped

	when(run_tg && (seqcount == 0)){

		%{/* Write to SeqRAM 1 */}%

		%%// Reset trigger
		run_tg = 0;
		pvPut(run_tg, SYNC);

		%%// Status update (preparing to run)
	   	StateMachineStatus = 5;
		pvPut(StateMachineStatus, SYNC);

		%%// Update event record arrays
	   	for(i = 0; i < eventNum; i++){

			pvGet(event_codes[i], SYNC);
			pvGet(event_timestamps[i], SYNC);
			pvGet(event_modes[i], SYNC);
			pvGet(event_ctrl[i], SYNC);
	   	}

		%%// Update and order EventPointerArray
	   	updateEventPointerArray(eventNum, event_codes, event_timestamps, event_modes, event_ctrl);

		numberOfWrites = seqOneWrite(eventNum, ssId, &seqaddr, &seqcode, &seqtime,
					pvIndex(seqaddr), pvIndex(seqcode), pvIndex(seqtime));

		%%// Force seqcountRBV to update
		seqcount_proc = 1;
		pvPut(seqcount_proc, SYNC);

		printf("Run Triggered\n");
	} state CheckSeq1Write

	when(seqs == 1){

		%{/* Just go to Running state */}%

		%%//printf("Moving to Running State\n");
	} state Running

	when(stop_tg){

		%{/* Reset trigger */}%

		stop_tg = 0;
		pvPut(stop_tg, SYNC);

	} state Stopped

	when(stopinj_tg){

		%{/* Reset trigger */}%

		stopinj_tg = 0;
		pvPut(stopinj_tg, SYNC);

	} state Stopped

	when(inj_tg){

		%{/* Reset trigger */}%

		inj_tg = 0;
		pvPut(inj_tg, SYNC);

	} state Stopped

	when(restart_tg){

		%{/* Reset trigger */}%

		restart_tg = 0;
		pvPut(restart_tg, SYNC);

	} state Stopped

	when(repeatinj_tg){

		%{/* Reset trigger */}%		

		repeatinj_tg = 0;
		pvPut(repeatinj_tg, SYNC);

	} state Stopped
    }

    state CheckSeq1Write{

	entry{

	    %%//printf("CheckSeq1Write Entry\n");

	    %%//printf("Debugging EVG:seqen: numberOfWrites= %d, seqcount= %d, seqen_rbv= %d, seqs=%d\n", numberOfWrites, seqcount, seqen_rbv, seqs);
	}

	when(seqcount == numberOfWrites && seqen_rbv == 0){

		%{/* Successful Write */}%

		%%// Enable SeqRAM
		seqen = 1;
		pvPut(seqen, SYNC);

		%%// Switch to SeqRAM 1
		seqsw = 1;
		pvPut(seqsw, SYNC);

		printf("Write to SeqRAM 1 succeded\n");

	} state CheckSeq1Write

	when(seqs == 1){

		%%//printf("Going from CheckSeq1Write to Running State\n");

		%{/* Just go to Running state */}%

		%%//printf("Moving to Running State\n");
	} state Running

	when(delay(5.0) && seqen_rbv == 0){

		%{/* Unsuccessful Write */}%

		printf("Error: Write to SeqRAM 1 Failed.\n");

		%%// seqcountRBV will be cleared by seqsw in Stopped Entry

		printf("CheckSeq1Write: Unseccessful Write to Seq1, going to Stopped State\n");

	} state Stopped
    }

    state Running {

	entry{

	    %{/* RUNNING ENTRY	

		-Status update
		-Clear numberOfWrites

	    */}%

	   %%// Status update (running)
	   StateMachineStatus = 2;
	   pvPut(StateMachineStatus, SYNC);

	   %%// Clear number of writes
	   numberOfWrites = 0;

	   %%//printf("Running Entry\n");
	}
	
	when(stop_tg){

		%{/* Stop SeqRAM (disable SeqRAM) */}%

		%%// Reset trigger
		stop_tg = 0;
		pvPut(stop_tg, SYNC);

		%%// Disable SeqRAM
		seqen = 0;
		pvPut(seqen, SYNC);

	    	printf("Stop Triggered\n");
	} state Running

	when(seqs == 0){

		%{/* Just go to Stopped state */}%

	    	%%//printf("Moving to Stopped State\n");
	} state Stopped

	when(inj_tg || repeatinj_tg){

		%{/* 
		      -Update Bucket list
		      -Update Bucket list length
		      -Write to seqRAM 2
		*/}%

		%%// Reset trigger
		inj_tg = 0;
		pvPut(inj_tg, SYNC);

		%%// Status update (preparing to inject)
	   	StateMachineStatus = 6;
		pvPut(StateMachineStatus, SYNC);

		%%// Update bucket list
		pvGet(tbl, SYNC);

		%%// Update bucket list length
		pvGet(tbl_length, SYNC);

		%%// Write to seqRAM 2
		if(tbl_length > 0){

			%%// Update event record arrays
	   		for(i = 0; i < eventNum; i++){

				pvGet(event_codes[i], SYNC);
				pvGet(event_timestamps[i], SYNC);
				pvGet(event_modes[i], SYNC);
				pvGet(event_ctrl[i], SYNC);
	   		}	

			%%// Update and order EventPointerArray
	   		updateEventPointerArray(eventNum, event_codes, event_timestamps, event_modes, event_ctrl);

			numberOfWrites = seqTwoWrite(eventNum, tbl, tbl_length, ssId, &seqaddr, &seqcode, &seqtime,
								pvIndex(seqaddr), pvIndex(seqcode), pvIndex(seqtime));

			%%// Force seqcountRBV to update
			seqcount_proc = 1;
			pvPut(seqcount_proc, SYNC);
		}

	    	printf("Injection Triggered\n");
	} state CheckSeq2Write
	
	when(seqs == 2){

		%{/* Just go to Injecting state */}%

	    	%%//printf("Moving to Injecting State\n");
	} state Injecting

	when(restart_tg){

		%{/* Just go to Restarting state */}%

		%%// Reset trigger
		restart_tg = 0;
		pvPut(restart_tg, SYNC);

	   	printf("Restart Triggered\n");
	} state Restarting

	when(run_tg){

		%{/* Reset trigger */}%

		run_tg = 0;
		pvPut(run_tg, SYNC);

	} state Running

	when(stopinj_tg){

		%{/* Reset trigger */}%

		stopinj_tg = 0;
		pvPut(stopinj_tg, SYNC);

	} state Running
    }

    state CheckSeq2Write{

	entry{

	    %%//printf("CheckSeq2Write Entry\n");

	    %%//printf("Debugging EVG:seqen: numberOfWrites= %d, seqcount= %d, seqen_rbv= %d, seqs=%d\n", numberOfWrites, seqcount, seqen_rbv, seqs);
	}

	when(tbl_length == 0){

		%{/* Just go to Running state */}%

	} state Running

	when(seqcount == numberOfWrites){

		%{/* Successful Write */}%

		%%// Avoid when condition being entered again
		numberOfWrites = -1;

		%%// Switch to SeqRAM 2
		seqsw = 1;
		pvPut(seqsw, SYNC);

		printf("Write to SeqRAM 2 succeded\n");

	} state CheckSeq2Write

	when(seqs == 2){

		%{/* Just go to Injecting state */}%

		%%//printf("Moving to Injecting State\n");
	} state Injecting

	when(delay(5.0) && seqs != 2){

		%{/* Unsuccessful Write */}%

		%%// seqcountRBV will not be cleared
		%%// System will keep failing if not restarted

		printf("Error: Failed to switch or to write to SeqRAM 2.\n");

	} state Running
    }

    state Injecting {
	entry{

	    %{/* INJECTING ENTRY	

		-Status update

	    */}%

	   %%// Status update (injecting)
	   StateMachineStatus = 3;
	   pvPut(StateMachineStatus, SYNC);

	   %%//printf("Injecting Entry\n");
	}

	when(seqs == 1){

		%{/* Just go to Running state */}%

	   	%%//printf("Moving to Running State\n");
	} state Running

	when(stopinj_tg){

		%{/* Return to SeqRAM 1 */}%

		%%// Reset trigger
		stopinj_tg = 0;
		pvPut(stopinj_tg, SYNC);

		%%// Switch seqRAM
		if(seqs == 2){
		   seqsw = 1;
		   pvPut(seqsw, SYNC);
		}

	   	printf("Stop Inj Triggered\n");
	} state Injecting

	when(stop_tg){

		%{/* Stop SequenceRAM (disable SeqRAM) */}%

		%%// Reset trigger
		stop_tg = 0;
		pvPut(stop_tg, SYNC);

		%%// Disable SeqRAM
		seqen = 0;
		pvPut(seqen, SYNC);

	   	printf("Stop Triggered\n");
	} state Injecting

	when(seqs == 0){

		%{/* Just go to Stopped state */}%

		%%//printf("Moving to Stopped State\n");
	} state Stopped

	when(run_tg){

		%{/* Reset trigger */}%

		run_tg = 0;
		pvPut(run_tg, SYNC);

	} state Injecting

	when(inj_tg){

		%{/* Reset trigger */}%

		inj_tg = 0;
		pvPut(inj_tg, SYNC);

	} state Injecting

	when(restart_tg){

		%{/* Reset trigger */}%

		restart_tg = 0;
		pvPut(restart_tg, SYNC);

	} state Injecting
    }

    state Restarting{

	entry{

	    %{/* RESTARTING ENTRY	

		-Status update
	    */}%	 

	   %%// Status update (restarting)
	   StateMachineStatus = 4;
	   pvPut(StateMachineStatus, SYNC);

	   %%//printf("Restarting Entry\n");
	}

	when(seqen_rbv != 0){

		%{/* Make sure SeqRAM is disabled */}%
		
		seqen = 0;
	   	pvPut(seqen, SYNC);

	} state Restarting

	when(seqen_rbv == 0 && seqcount != 0){

		%{/* Reset seqcount and clear number of writes */}%

		seqsw = 1;
		pvPut(seqsw, SYNC);

	        numberOfWrites = 0;

		%%// Force seqcountRBV to update
		seqcount_proc = 1;
		pvPut(seqcount_proc, SYNC);

	}state Restarting

	when(seqs == 0 && seqen_rbv == 0 && seqcount == 0){

		%{/* Write to SeqRAM 1 */}%

		%%// Update event record arrays
	   	for(i = 0; i < eventNum; i++){

			pvGet(event_codes[i], SYNC);
			pvGet(event_timestamps[i], SYNC);
			pvGet(event_modes[i], SYNC);
			pvGet(event_ctrl[i], SYNC);
	   	}

	   	%%// Update and order EventPointerArray
	   	updateEventPointerArray(eventNum, event_codes, event_timestamps, event_modes, event_ctrl);

		numberOfWrites = seqOneWrite(eventNum, ssId, &seqaddr, &seqcode, &seqtime,
					pvIndex(seqaddr), pvIndex(seqcode), pvIndex(seqtime));

		%%// Force seqcountRBV to update
		seqcount_proc = 1;
		pvPut(seqcount_proc, SYNC);

	} state CheckSeq1Write

	when(stop_tg){

		%{/* Reset trigger */}%

		stop_tg = 0;
		pvPut(stop_tg, SYNC);

	} state Restarting

	when(stopinj_tg){

		%{/* Reset trigger */}%

		stopinj_tg = 0;
		pvPut(stopinj_tg, SYNC);

	} state Restarting

	when(run_tg){

		%{/* Reset trigger */}%

		run_tg = 0;
		pvPut(run_tg, SYNC);

	} state Restarting

	when(inj_tg){

		%{/* Reset trigger */}%

		inj_tg = 0;
		pvPut(inj_tg, SYNC);

	} state Restarting

	when(restart_tg){

		%{/* Reset trigger */}%

		restart_tg = 0;
		pvPut(restart_tg, SYNC);

	} state Restarting
    }
}

%%//----------------------------------------
%%// 	  Escaped C Code Definition
%%//----------------------------------------

%{
	/* 
	   Name: str2int

	   Description: Convert a string to its corresponding integer value.

	   Arguments: A string containing the representation of an integer value.

	   Return: The int value corresponding to the string representation provided.
	*/
	int str2int(char * str){

		int num = 0, i = 0;

		while(str[i] != '\0'){

			int aux = ch2int(str[i]);
			if(aux != -1){
				num *= 10;
				num += aux;
			}
			else{
				num = -1;
				break;			
			}			

			i++;
		}

		return num;
	}

	/* 
	   Name: ch2int

	   Description: Convert a char to its correponding integer value.

	   Arguments: A character to be converted.

	   Return: An int value corresponding to the char argument.
	*/
	int ch2int(char ch){

		int num = 0;

		if(ch =='0')
			num = 0;
		else if(ch == '1')
			num = 1;
		else if(ch == '2')
			num = 2;
		else if(ch == '3')
			num = 3;
		else if(ch == '4')
			num = 4;
		else if(ch == '5')
			num = 5;
		else if(ch == '6')
			num = 6;
		else if(ch == '7')
			num = 7;
		else if(ch == '8')
			num = 8;
		else if(ch == '9')
			num = 9;
		else
			num = -1;

		return num;	
	}

	/*
	   Name: init_EventPointerArray

	   Description: Initializes the array of pointers EventPointerArray using an array of Events.
			The addresses of the EventArray elements become the elements of the pointer array.

	   Arguments: The number of elements in EventPointerArray (equal to EventArray).
	*/
	void init_EventPointerArray(int size){

		int i;

		for(i = 0; i < size; i++){

			EventPointerArray[i] = &EventArray[i];
		}
	}

	/*
	   Name: bubbleSort

	   Description: Sort an array of pointers to Event in ascending order using the Event->timestamp field.
			The algorithm used is bubble sort. A check is included that stop sorting if array is sorted.
			When equal timestamps are found, the event of higher index has its timestamp increased by 1.

	   Arguments: First argument is a pointer to the array to be sorted, second argument is the array size.

	   Return: 0-> Fail, 1-> Success.
	*/
	int bubbleSort(Event* * evArray, int arraySize){

		int sorted = 0;
		int a, b;

		if(evArray == NULL){

			printf("Can't sort Event Array. Event array is null.\n");
			
			// Fail
			return 0;
		}

		// Index of sorted array
		for (a = 0; a < arraySize - 1; a++){

			sorted = 1;			

			// Scan array backward
			for (b = arraySize - 1; b > a; b--){
				
				// swap unordered neighbors
				if (evArray[b-1]->timestamp > evArray[b]->timestamp){ 

					swap(&evArray[b-1], &evArray[b]);
					sorted = 0;
				}

				// handle equal timestamps
				if(evArray[b-1]->timestamp == evArray[b]->timestamp){

					evArray[b]->timestamp += 1;
					sorted = 0;
				}
			}

			// Check if array had no swaps (is ordered)
			if(sorted)
				break;
		}	

		// Success
		return 1;
	}

	/*
	   Name: swap

	   Description: Swap two elements containing pointers to Event.

	   Arguments: First argument is a pointer to the first pointer element.
		      Second argument is a pointer to the second pointer element.
	*/
	void swap(Event* *a, Event* *b){

		Event * tmp;
		tmp = *a;
		*a = *b;
		*b = tmp;
	}
	/*
	   Name: updateEventPointerArray

	   Description: Updates the EventPointerArray with the updated event information obtained with pvGet.
			The array is also ordered in ascending order.

	   Arguments: First argument is the number of Events pointed to by EventPointerArray.
		      Following arguments are updated code, timestamp, mode, and control arrays.   
	*/
	void updateEventPointerArray(int evNumber, int * code_arr,
				 int * time_arr, int * mode_arr, int * control_arr){

		int i;

		// Copy Events to array
		for(i = 0; i < evNumber; i++){
				
			EventPointerArray[i]->code = code_arr[i];
			EventPointerArray[i]->timestamp = time_arr[i];
			EventPointerArray[i]->mode = mode_arr[i];
			EventPointerArray[i]->ctrl = control_arr[i];
		}

		// Sort events by timestamp in ascending order
		bubbleSort(EventPointerArray, evNumber);
	}

	/*
	   Name: seqOneWrite

	   Description: Writes to SequenceRAM 1 the events configured as ALWAYS.
			The event information is acquired from EventPointerArray.
			Checks if seqRAM pointer is pointing to the address it was supposed to at the end.
			The seqtime record is responsible for triggering the hardware write when processed.

	   Arguments: First argument is the total number of events (ALWAYS and INJECTION).
		      Second argument is the calling state set.
		      Next three arguments are pointers to variables seqaddr, seqcode, and seqtime.
		      Following three arguments are the VAR_IDs of the variables seqaddr, seqcode, and seqtime.

	   Return: Number of write operations performed.	   
	*/
	int seqOneWrite(int evnum, SS_ID ssId, int *pseqaddr, int *pseqcode, int *pseqtime,
						VAR_ID seqaddr_id, VAR_ID seqcode_id, VAR_ID seqtime_id){
											
		int i, maxdelay = 0, address = 0;

		// timestamp offset for code 0x7F from previous timestamp
		int offSetEndCode = 10;

		for(i = 0; i < evnum; i++){

			// jump non-always events
			if(EventPointerArray[i]->ctrl != ALWAYS)
				continue;

			// define address, get code and timestamp
			*pseqaddr = address;
			*pseqcode = EventPointerArray[i]->code;
			*pseqtime = maxdelay = EventPointerArray[i]->timestamp;

			// write event info to seqRAM records
			seq_pvPut(ssId, seqaddr_id, SYNC);
			seq_pvPut(ssId, seqcode_id, SYNC);

			// write timestamp (wich also triggers write to seqRAM)
			seq_pvPut(ssId, seqtime_id, SYNC);

			////////////// D E B U G G I N G //////////////////////////////////////////

			printf("Write to SeqRAM 1-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

			///////////////////////////////////////////////////////////////////////////

			// point to next address
			address++;
		}

	      // Send 0x7F code

		// define address, get code and timestamp
		*pseqaddr = address;
		*pseqcode = 0x7F;
		*pseqtime = maxdelay + offSetEndCode;

		// write event info to seqRAM records
		seq_pvPut(ssId, seqaddr_id, SYNC);
		seq_pvPut(ssId, seqcode_id, SYNC);

		// write timestamp (wich also triggers write to seqRAM)
		seq_pvPut(ssId, seqtime_id, SYNC);

		////////////// D E B U G G I N G //////////////////////////////////////////

		printf("Write to SeqRAM 1-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

		///////////////////////////////////////////////////////////////////////////


		// point to next address
		address++;

		// return number of writes to SeqRAM
	     	return address;
	}

	/*
	   Name: seqTwoWrite

	   Description: Writes to SequenceRAM 2 the events configured as INJECTION.
			The event information is acquired from EventPointerArray.
			Checks if seqRAM pointer is pointing to the address it was supposed to at the end.
			The seqtime record is responsible for triggering the hardware write when processed.

	   Arguments: First argument is total number of events (ALWAYS and INJECTION).
		      Second argument is the bucket array.
		      Third argument is the length of the bucket array.
		      Next three arguments are pointers to variables seqaddr, seqcode, and seqtime.
		      Following three arguments are the VAR_IDs of the variables seqaddr, seqcode, and seqtime.

	   Return: Number of write operations performed.	   
	*/
	int seqTwoWrite(int evnum, int TBL[], int length, SS_ID ssId, int *pseqaddr, int *pseqcode, int *pseqtime,
								VAR_ID seqaddr_id, VAR_ID seqcode_id, VAR_ID seqtime_id){
									
		int i, j, seqdly, rfdly, maxdelay = 0, address = 0;

		// timestamp offset for code 0x7E or 0x70 from previous timestamp
		int offSetEndCode = 10;

		// timestamp for sending the RF delay code to modules
		int RFDlyTimestamp = 10;

		// for each bucket
		for(i = 0; i < length; i++){

			// Send appropriate RF delay for modules
			seqdly = TBL[i] / 4;
			rfdly = TBL[i] % 4;

			// Set RF Delay Code (code = 0x40 + rfdly)

			*pseqaddr = address;
			*pseqcode = 0x40 + rfdly * 5;
			*pseqtime = RFDlyTimestamp;

			// write event info to seqRAM records
			seq_pvPut(ssId, seqaddr_id, SYNC);
			seq_pvPut(ssId, seqcode_id, SYNC);

			// write timestamp (wich also triggers write to seqRAM)
			seq_pvPut(ssId, seqtime_id, SYNC);

			////////////// D E B U G G I N G //////////////////////////////////////////

			printf("Write to SeqRAM 2-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

			///////////////////////////////////////////////////////////////////////////


			// point to next address
			address++;

			// write events
			for(j = 0; j < evnum; j++){

				// INJECTION
				if(EventPointerArray[j]->mode == INCR){			

					// Set timestamp WITH seqdly
					*pseqtime = maxdelay = EventPointerArray[j]->timestamp + seqdly;
				}
				else{

					// Set timestamp WITHOUT seqdly
					*pseqtime = maxdelay = EventPointerArray[j]->timestamp;
				}
				

			      // Write Specified Code 
				// specify address and code (timestamp was specified above)
				*pseqaddr = address;
				*pseqcode = EventPointerArray[j]->code;

				// write event info to seqRAM records
				seq_pvPut(ssId, seqaddr_id, SYNC);	
				seq_pvPut(ssId, seqcode_id, SYNC);
	
				// write timestamp (wich also triggers write to seqRAM)
				seq_pvPut(ssId, seqtime_id, SYNC);

				////////////// D E B U G G I N G //////////////////////////////////////////

				printf("Write to SeqRAM 2-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

				///////////////////////////////////////////////////////////////////////////


				// point to next address
				address++;
				
			}

		        // SequenceRAM Wait code 
			if(i < length - 1){

				*pseqcode = 0x70; // Send 0x70 code
				
				// define address and timestamp
				*pseqaddr = address;
				*pseqtime = maxdelay + offSetEndCode;
	
				// write event info to seqRAM records
				seq_pvPut(ssId, seqaddr_id, SYNC);
				seq_pvPut(ssId, seqcode_id, SYNC);

				// write timestamp (wich also triggers write to seqRAM)
				seq_pvPut(ssId, seqtime_id, SYNC);

				////////////// D E B U G G I N G //////////////////////////////////////////

				printf("Write to SeqRAM 2-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

				///////////////////////////////////////////////////////////////////////////


				// point to next address
				address++;		
			}	
		}    

		// SequenceRAM Switch RAM code 
		*pseqcode = 0x7E; // Send 0x7E code
		
		// define address and timestamp
		*pseqaddr = address;
		*pseqtime = maxdelay + offSetEndCode;
	
		// write event info to seqRAM records
		seq_pvPut(ssId, seqaddr_id, SYNC);
		seq_pvPut(ssId, seqcode_id, SYNC);

		// write timestamp (wich also triggers write to seqRAM)
		seq_pvPut(ssId, seqtime_id, SYNC);

		////////////// D E B U G G I N G //////////////////////////////////////////

		printf("Write to SeqRAM 2-> seqaddr= %d, seqcode= %d, seqtime= %d\n", *pseqaddr, *pseqcode, *pseqtime);

		///////////////////////////////////////////////////////////////////////////

		// point to next address
		address++;

		// return number of writes to SeqRAM
	        return address;
	}
}%
