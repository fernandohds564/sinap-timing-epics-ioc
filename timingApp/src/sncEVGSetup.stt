program sncEVGSetup

%%//----------------------------------------
%%// 	      Monitored PVs
%%//----------------------------------------

int uploadproc;
assign uploadproc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:uploadT.PROC";

int downloadproc;
assign downloadproc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:downloadT.PROC";

int download;
assign download to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:download.VAL";
monitor download;

int statdev;
assign statdev to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:statdev";
monitor statdev;

int past_alive = -1;
int alive;
assign alive to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:alive";
monitor alive;

int funselRBV;
assign funselRBV to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:funselRBV.RVAL";
monitor funselRBV;

int network;
assign network to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:network";

int utc;
assign utc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:UTC";

%%//----------------------------------------
%%// 	  Escaped C Code Declaration
%%//----------------------------------------

%%#include <time.h>

%%//----------------------------------------
%%// 	    State Notation Language
%%//----------------------------------------

ss configuration {
    state init {
		when (delay(1.0)){
			printf("\n%s-%s:%s-%s%s state machine initiated\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));
		} state upload
    }
    state upload {
		when (statdev == 0){
		} state waiting
		when (network == 1){
			uploadproc = 1;
			pvPut(uploadproc,SYNC);
			printf("\nConfiguration uploaded from %s-%s:%s-%s%s.\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));
		} state waiting
		when (delay(2.0)) {
		} state upload
    }
    state waiting {
		when ((statdev == 0) && (network == 1)) {
			download = 1;
		} state download
		when ((download == 1) && (network == 1)) {
			download = 1;
		} state download
		when (delay(1)) {
		} state waiting
	}
	
	state download {
		entry {
			downloadproc = 1;
			pvPut(downloadproc,SYNC);
			printf("\nConfiguration downloaded to %s-%s:%s-%s%s.\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));
			download = 0;
			pvPut(download,SYNC);

			%%// Update UTC to epoch time
			utc = time(NULL);
			pvPut(utc, SYNC);
			%%// Force broadcast
			%%//utc = 0;
			%%//pvPut(utc, SYNC);
		} 
		when (delay(1)) {
		}state waiting
	}
}

ss networkStatus {
	state networkCheck {
		when (delay(2.0)) {
			if (funselRBV == 0) {
				past_alive = -1;
				network = 0;
				pvPut(network,SYNC);
			}
			else if (statdev == 0) {
				past_alive = -1;
				network = 1;
				pvPut(network,SYNC);
			}
			else if (alive > past_alive) {
				past_alive = alive;
				network = 1;
				pvPut(network,SYNC);
			}
			else {
				past_alive = alive;
				network = 0;
				pvPut(network,SYNC);
			}
		} state networkCheck
	}
}
