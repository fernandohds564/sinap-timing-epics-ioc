program sncEVGSetup

%%//----------------------------------------
%%// 	      Monitored PVs
%%//----------------------------------------

int uploadtrig;
assign uploadtrig to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:uploadT.VAL";

int downloadproc;
assign downloadproc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:downloadT.PROC";

int download;
assign download to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:download.VAL";
monitor download;

int statdev;
assign statdev to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:statdev";
monitor statdev;

int past_alive = -1;
int alive;
assign alive to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:alive";
monitor alive;

int funsel;
assign funsel to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:funsel.VAL";

int funselRBV;
assign funselRBV to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:funselRBV.RVAL";
monitor funselRBV;

int network;
assign network to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:network";
monitor network;

int utc;
assign utc to "{Sec}-{Sub}:{Dis}-{Dev}{Idx}:UTC";

%%//----------------------------------------
%%// 	  Escaped C Code Declaration
%%//----------------------------------------

%%#include <time.h>

%%//----------------------------------------
%%// 	    State Notation Language
%%//----------------------------------------

ss configuration {

    state init {

	when (delay(1.0)){

		%{/* Wait 1 sec while module starts up */}%

		%%// Init message
		printf("\n%s-%s:%s-%s%s state machine initiated\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));

	} state upload
    }

    state upload {
	
	when (funselRBV != 18){

		%{/* If module is not configured, do not upload parameters */}%

	} state waiting

	when (network == 1){

		%{/* If network is ON, upload parameters! */}%

		%%// trigger upload
		uploadtrig = 1;
		pvPut(uploadtrig,SYNC);

		%%// upload message
		printf("\nConfiguration uploaded from %s-%s:%s-%s%s.\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));

	} state waiting

    }

    state waiting {

	when ((funselRBV != 18) && (network == 1)) {

		%{/* If STD-EVO is not correctly configured, download! */}%

		download = 1;

	} state download

	when ((download == 1) && (network == 1)) {

		%{/* If download requested, download! */}%

		download = 1;

	} state download

    }
	
    state download {

	entry {

		%%// set device function to EVG (option 2)
		funsel = 2;
		pvPut(funsel, SYNC);

		%%// trigger download
		downloadproc = 1;
		pvPut(downloadproc,SYNC);

		%%// download message
		printf("\nConfiguration downloaded to %s-%s:%s-%s%s.\n", macValueGet("Sec"), macValueGet("Sub"), macValueGet("Dis"), macValueGet("Dev"), macValueGet("Idx"));

		%%// clear download PV
		download = 0;
		pvPut(download,SYNC);

		%%// Update UTC to epoch time
		utc = time(NULL);
		pvPut(utc, SYNC);
	} 

	when (delay(1)) {

		%{/* Wait until download is completed */}%

	}state waiting
    }
}

ss networkStatus {

	state networkCheck {

		when (delay(2.0)) {

			if (funselRBV == 0) {
				past_alive = -1;
				network = 0;
				pvPut(network,SYNC);
			}
			else if (statdev == 0) {
				past_alive = -1;
				network = 1;
				pvPut(network,SYNC);
			}
			else if (alive > past_alive) {
				past_alive = alive;
				network = 1;
				pvPut(network,SYNC);
			}
			else {
				past_alive = alive;
				network = 0;
				pvPut(network,SYNC);
			}

		} state networkCheck
	}
}
